import BaseCommand from '../modules/commands/BaseCommand.js';

import UserManager from '@managers/UserManager';

import DiscordUtil from '@bot/discord-util';
const {MessageConstructor} = DiscordUtil;

import Util from '@global/util';

class Command extends BaseCommand {
  constructor() {
    super();
  }


  run(interaction){
    const userId = interaction.options.get("user")?.value ?? interaction.user.id;
    const userData = UserManager.getUser(userId);

    const userUser = interaction.client.users.cache.get(userId);

    const highestRankRoleId = userData.getRank(interaction)?.roleId;

    const rankTitle = highestRankRoleId ?
      `<@&${ highestRankRoleId }>` :
      "–û—Ç—Å—É—Å—Ç–≤—É–µ—Ç.";

    const fields = this.getFields(userData);

    const rankContent     = `üî• **–†–∞–Ω–≥:** ${ rankTitle } (—Ä–µ–π—Ç–∏–Ω–≥ ${ userData.mmr })`;
    const eloContent      = `üß™ **ELO:** ${ Util.ending(userData.eloCoins, "–ø–æ–∏–Ω—Ç", "–æ–≤", "", "–∞") }`;
    const messagesContent = `üì® –°–æ–æ–±—â–µ–Ω–∏–π: ${ userData.messages }`;


    const message = new MessageConstructor({
      author: {
        name:    userUser.username,
        iconURL: userUser.avatarURL()
      },
      description: `${ rankContent }\n${ eloContent }\n\n${ messagesContent }`,
      footer: {text: "–ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω:"},
      fields,
      timestamp: userUser.createdAt
    });
    interaction.reply(message);
  }

  getFields(userData){

    const FIELDS_DATA = [
      {
        id: "Identifier",
        condition: ({nickname, tagId}) => nickname || tagId,
        getField: ({nickname, tagId}) => {
          const name = "**–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –∏–≥—Ä–æ–∫–∞:**";
          const value = [
            nickname ? `–ù–∏–∫–Ω–µ–π–º: ${ nickname }` : "",
            tagId    ? `–¢—ç–≥: ${ tagId }`        : ""

          ].join("\n");

          return {name, value};
        }
      },

      {
        id: "Winrate",
        condition: () => true,
        getField: ({matchCount, matchWons, matchLoses}) => {
          const percentage = Math.floor((matchWons / matchCount) * 100);

          const name = `**–í–∏–Ω—Ä–µ–π—Ç: ${ percentage ? `${ percentage }%` : "N/A" }**`;
          const value = `–ò–≥—Ä: ${ matchCount }\n–ü–æ–±–µ–¥: ${ matchWons }\n–ü–æ—Ä–∞–∂–µ–Ω–∏–π: ${ matchLoses }`;

          return {name, value};
        }
      },
    ]

    const fields = FIELDS_DATA
      .filter(data => data.condition(userData))
      .map(data => data.getField(userData));


    return fields;
  }

  static data = {
    name: "user",
    // Discord SlashCommands
    slash: {
      type: 1,
      description: "–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ",
      dm_perrmissions: true,
      options: [{
        type: 6,
        name: "user",
        description: "–ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
      }]
    }
  };

}


export { Command };

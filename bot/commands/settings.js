import BaseCommand from '../modules/commands/BaseCommand.js';

import { Modal } from "discord.js";
import DiscordUtil from '@bot/discord-util';

import Util from "@global/util";
const {MessageConstructor, ComponentsSimplify} = DiscordUtil;

import GuildManager from '@managers/GuildManager';


class Command extends BaseCommand {
  constructor() {
    super();
  }

  run(interaction){
    const message = this.createMessage({interaction});
    interaction.reply(message);
  }

  buttonBack([...rest], interaction){
    const message = this.createMessage({interaction});
    interaction.update(message);
  }

  createMessage({interaction}){
    const guildData = GuildManager.getGuild( interaction.guild );

    const rankRoles = guildData.rankRoles ?? [];
    const rankStatsChannelId = guildData.rankStatsChannelId;
    const loggingChannelId   = guildData.loggingChannelId;

    const author = { name: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–æ—Ç–∞", iconURL: interaction.guild.iconURL() };
    const description = `–í —ç—Ç–æ–º –º–µ–Ω—é –≤—ã –º–æ–∂–µ—Ç–µ:\n¬∑ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞–Ω–≥–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.\n¬∑ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Ç—á–µ–π. –í —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –º–∞—Ç—á–∞ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –∏–≥—Ä–æ–∫–∏, –≤—Ä–µ–º—è –º–∞—Ç—á–∞ –∏ —Ä–µ–π—Ç–∏–Ω–≥.\n¬∑ –ñ—É—Ä–Ω–∞–ª –¥–µ–π—Å—Ç–≤–∏–π (–∫–∞–Ω–∞–ª —Å –ª–æ–≥–∞–º–∏) –ø—Ä–æ—Å—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞. –¢–∞–º –±—É–¥—É—Ç –≤—ã–≤–æ–¥–∏—Ç—å—Å—è –¥–µ–π—Å—Ç–≤–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–∏–º –±–æ—Ç–æ–º.`;

    const message = new MessageConstructor({
      author,
      description,
      color: "#7e1503",
      fields: [
        { name: "–†–∞–Ω–≥–∏:", value: `(${ Util.ending(rankRoles.length, "—Ä–æ–ª", "–µ–π", "—å", "–∏") })` },
        { name: "–ö–∞–Ω–∞–ª –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:", value: rankStatsChannelId ? `<#${ rankStatsChannelId }>` : "–û—Ç—Å—É—Å—Ç–≤—É–µ—Ç.", inline: true },
        { name: "–ö–∞–Ω–∞–ª —Å –ª–æ–≥–∞–º–∏", value: loggingChannelId ? `<#${ loggingChannelId }>` : "–û—Ç—Å—É—Å—Ç–≤—É–µ—Ç.", inline: true }

      ],
      components: [
        { style: 2, type: 2, customId: `command.settings.rankRoles.run`, label: "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞–Ω–≥–æ–≤—ã–µ —Ä–æ–ª–∏", emoji: "üèÜ" },
        { style: 2, type: 2, customId: `command.settings.modalSetRankStatsChannel`, label: "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è —Ä–∞–Ω–≥–æ–≤", emoji: "üóÉÔ∏è" },
        { style: 2, type: 2, customId: `command.settings.modalSetLoggingChannel`, label: "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è", emoji: "üóÉÔ∏è" }

      ]
    });

    return message;
  }


  rankRoles([methodName, ...rest], interaction){

    const rankRoles = new RankRolesUI();
    return rankRoles[methodName](rest, interaction);
  }


  modalSetRankStatsChannel([...rest], interaction){

    const hasPermissions = interaction.member.permissions.has("MANAGE_GUILD");
    if (!hasPermissions){
      interaction.reply({ content: `–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∞–≤–æ –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–º`, ephemeral: true });
      return;
    }

    const components = new ComponentsSimplify().simplify({
      style: 1,
      type: "TEXT_INPUT",
      placeholder: "<#994913375626743838>",
      customId: `command.settings.input.setRankStatsChannel`,
      label: "–ö–∞–Ω–∞–ª"
    });


    const modal = new Modal({ customId: "command.settings.setRankStatsChannel", title: "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–∞–Ω–∞–ª", components });
    interaction.showModal(modal);
  }

  async setRankStatsChannel([...rest], interaction){
    const value = interaction.fields.getField("command.settings.input.setRankStatsChannel").value;
    const channelId = value.match(/\d{17,19}/)?.[0];

    if (!channelId){
      const message = new MessageConstructor({ content: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–π–¥–∏ –∫–∞–Ω–∞–ª–∞ –≤ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ", ephemeral: true });
      interaction.reply(message);
      return;
    }

    const isChannelExists = interaction.client.channels.cache.has(channelId);

    if (!isChannelExists){
      const message = new MessageConstructor({ content: `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç –∫–∞–Ω–∞–ª–∞ —Å ID ${ channelId }`, ephemeral: true });
      interaction.reply(message);
      return;
    }

    const guild = interaction.guild;
    const guildData = GuildManager.getGuild(guild);

    guildData.rankStatsChannelId = channelId;
    await GuildManager.update( guildData );

    const message = this.createMessage({interaction});
    interaction.update(message);
  }



  modalSetLoggingChannel([...rest], interaction){

    const hasPermissions = interaction.member.permissions.has("MANAGE_GUILD");
    if (!hasPermissions){
      interaction.reply({ content: `–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∞–≤–æ –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–º`, ephemeral: true });
      return;
    }

    const components = new ComponentsSimplify().simplify({
      style: 1,
      type: "TEXT_INPUT",
      placeholder: "<#994913375626743838>",
      customId: `command.settings.input.setLoggingChannel`,
      label: "–ö–∞–Ω–∞–ª"
    });


    const modal = new Modal({ customId: "command.settings.setLoggingChannel", title: "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–∞–Ω–∞–ª", components });
    interaction.showModal(modal);
  }

  async setLoggingChannel([...rest], interaction){
    const value = interaction.fields.getField("command.settings.input.setLoggingChannel").value;
    const channelId = value.match(/\d{17,19}/)?.[0];

    if (!channelId){
      const message = new MessageConstructor({ content: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–π–¥–∏ –∫–∞–Ω–∞–ª–∞ –≤ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ", ephemeral: true });
      interaction.reply(message);
      return;
    }

    const isChannelExists = interaction.client.channels.cache.has(channelId);

    if (!isChannelExists){
      const message = new MessageConstructor({ content: `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç –∫–∞–Ω–∞–ª–∞ —Å ID ${ channelId }`, ephemeral: true });
      interaction.reply(message);
      return;
    }

    const guild = interaction.guild;
    const guildData = GuildManager.getGuild(guild);

    guildData.loggingChannelId = channelId;
    await GuildManager.update( guildData );

    const message = this.createMessage({interaction});
    interaction.update(message);
  }


  static data = {
    name: "settings",
    // Discord SlashCommands
    slash: {
      type: 1,
      description: "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±–æ—Ç–∞",
      dm_perrmissions: true,
      default_member_permissions: 8,
      options: []
    }
  };


}

class RankRolesUI {

  run([...rest], interaction){
    const message = this.createMessage({interaction});
    interaction.update(message);
  }


  replaceContent({interaction, comment}){
    const message = this.createMessage({interaction});

    if (comment)
      message.content = `${ comment }`;

    interaction.update(message);
  }


  createMessage({interaction}){
    const guildData = GuildManager.getGuild( interaction.guild.id );
    const rolesData = (guildData.rankRoles ?? [])
      .map(data => data.split(":"))
      .sort(([_1, a], [_2, b]) => a - b);

    const toRoman = (digit) => {
      const ROMAN = ["nulla", "I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX", "X", "XI", "XII", "XIII", "XIV", "XV", "XVI", "XVII", "XVIII", "XIX", "XX"];
      return ROMAN[digit];
    }


    const toField = ([roleId, mmrThreshloder], i) => {
      const name = `**${ toRoman(i + 1) }**.`;
      const SPACE = "‚†Ä";

      const value = `<@&${ roleId }> (${ mmrThreshloder });${ SPACE.repeat(4) }`;

      return { name, value, inline: true }
    };

    const fields = rolesData.length ?
      rolesData.map(toField).slice(0, 20) :
      [{ name: "–ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π —Ä–æ–ª–∏.", value: "–°–ª–µ–¥—É–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å!"}];


    const description = `–í—ã –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ —Å–ø–∏—Å–æ–∫ —Ä–∞–Ω–≥–æ–≤ üèÜ. –†–∞–Ω–≥–∏ –≤—ã–¥–∞—é—Ç—Å—è –∏–≥—Ä–æ–∫–∞–º –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞, –∫–æ—Ç–æ—Ä—ã–π –æ–Ω–∏ –º–æ–≥—É—Ç –ø–æ–ª—É—á–∏—Ç—å –≤ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è—Ö.\n\n–†–∞–Ω–≥–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: (${ rolesData.length }/20)`;

    const message = new MessageConstructor({
      ephemeral: true,
      description,
      fields,
      color: "#010101",
      components: [
        [
          {
            type: "BUTTON",
            customId: "command.settings.buttonBack",
            style: 2,
            label: "–ù–∞–∑–∞–¥",
          },
          {
            type: "BUTTON",
            customId: "command.settings.rankRoles.modalEdit",
            style: 2,
            label: "–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å",
            disabled: !rolesData.length
          },
          {
            type: "BUTTON",
            customId: "command.settings.rankRoles.modalCreate",
            style: 2,
            label: "–î–æ–±–∞–≤–∏—Ç—å",
          }
        ],
        [{
            type: "BUTTON",
            customId: "command.settings.rankRoles.removeAll",
            style: 4,
            label: "–£–¥–∞–ª–∏—Ç—å –≤—Å—ë!",
            disabled: !rolesData.length
        }]
      ]
    });

    return message;
  }


  modalEdit([...rest], interaction){

    const hasPermissions = interaction.member.permissions.has("MANAGE_GUILD");
    if (!hasPermissions){
      interaction.reply({ content: `–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∞–≤–æ –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–º`, ephemeral: true });
      return;
    }

    const guildData = GuildManager.getGuild( interaction.guild.id );
    const rolesData = (guildData.rankRoles ?? [])
      .map(data => data.split(":"))
      .sort(([_1, a], [_2, b]) => a - b);


    const components = new ComponentsSimplify().simplify({
      style: 2,
      type: "TEXT_INPUT",
      value: rolesData.length ?
        rolesData.map(([roleId, mmrThreshloder]) => `${ roleId }:${ mmrThreshloder }`).join("  ") :
        "–ó–¥–µ—Å—å –ø—É—Å—Ç–æ, —É–∫–∞–∂–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <–∞–π–¥–∏ —Ä–æ–ª–∏>:<–º–º—Ä>, –Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–∞–∫: `984687102472122368:0  994913375626743838:100`",

      customId: `command.settings.rankRole.rawData`,
      label: "–ê–π–¥–∏ —Ä–æ–ª–∏ : —Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è –µ—ë –ø–æ–ª—É—á–µ–Ω–∏—è"
    });

    const modal = new Modal({ customId: "command.settings.rankRoles.edit", title: "–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Å–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π", components });
    interaction.showModal(modal);
  }


  edit([...rest], interaction){
    const guildData = GuildManager.getGuild( interaction.guild );

    const rawData = interaction.fields.getField("command.settings.rankRole.rawData").value;
    const rawArray = rawData.match(/\d+:\d+/g);

    if (rawArray === null){
      this.throwOut({customText: `–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –ø—Ä–∏–≤–µ–ª–æ –±—ã –∫ –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö. –û—Ç–º–µ–Ω–µ–Ω–æ.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–£–¥–∞–ª–∏—Ç—å –≤—Å—ë", –µ—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ä–∞–Ω–≥–∏.`, interaction});
      return;
    }

    const oldList = (guildData.rankRoles ?? [])
      .map(raw => raw.split(":"));

    const newList = rawArray
      .map(raw => raw.split(":"));


    guildData.rankRoles = rawArray;
    GuildManager.update(guildData);

    const createComment = () => {
      const changesList = {
        deleted: 0,
        updated: 0,
        created: 0,
        strange: null
      }

      const isDeleted = ([roleId, mmr]) => {
        const result = newList.every(([compareRoleId]) => compareRoleId !== roleId);

        if (result)
          changesList.deleted++;

        return result;
      }

      const isUpdated = ([roleId, mmr]) => {
        const result = oldList.some(([compareRoleId, compareMmr]) => compareRoleId === roleId && compareMmr !== mmr);

        if (result)
          changesList.updated++;

        return result;
      }

      const isCreated = ([roleId, mmr]) => {
        const result = oldList.every(([compareRoleId]) => compareRoleId !== roleId);

        if (result)
          changesList.created++;

        return result;
      }



      oldList
        .forEach(isDeleted);

      newList
        .forEach(isUpdated);

      newList
        .forEach(isCreated);

      const strange = rawData.replaceAll(/\d+:\d+/g, "").trim();
      changesList.strange = strange || null;

      const PHRASES = {
        deleted: (count) => `–£–¥–∞–ª–µ–Ω–æ: ${ count }`,
        updated: (count) => `–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${ count }`,
        created: (count) => `–°–æ–∑–¥–∞–Ω–æ: ${ count }`,
        strange: (content) => `C—Ç—Ä–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: ${ content }`
      }

      const commentInfo = Object
        .entries(changesList)
        .filter(([key, value]) => value)
        .map(([key, value]) => PHRASES[key](value))
        .join("\n");

      const comment = commentInfo ? `>>> –ü–æ—Å–ª–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è:\n${ commentInfo }` : "";
      return comment;
    }



    const comment = createComment();
    this.replaceContent({interaction, comment});
  }

  modalCreate([...rest], interaction){

    const hasPermissions = interaction.member.permissions.has("MANAGE_GUILD");
    if (!hasPermissions){
      interaction.reply({ content: `–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∞–≤–æ –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–º`, ephemeral: true });
      return;
    }

    const components = new ComponentsSimplify().simplify([
      [{
        style: 1,
        type: "TEXT_INPUT",
        placeholder: "<@&994913375626743838>",
        customId: `command.settings.rankRoles.roleId`,
        label: "–†–æ–ª—å –∏–ª–∏ –µ—ë –∞–π–¥–∏",
        required: true,
        minLength: 17,
        maxLength: 24
      }],
      [{
        style: 1,
        type: "TEXT_INPUT",
        customId: `command.settings.rankRoles.rankMmr`,
        placeholder: "100",
        label: "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥",
        required: true,
        maxLength: 10
      }]
    ]);


    const modal = new Modal({ customId: "command.settings.rankRoles.create", title: "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ä–æ–ª–∏", components });
    interaction.showModal(modal);
  }

  create([...rest], interaction){

    const roleIdField =  interaction.fields.getField("command.settings.rankRoles.roleId").value;
    const mmrField =     interaction.fields.getField("command.settings.rankRoles.rankMmr").value;

    const roleId = roleIdField.match(/\d{17,19}/)?.[0];

    if (!roleId){
      this.throwOut({code: "NULL_ROLE_IN_TEXT", interaction});
      return;
    }

    const mmr = mmrField.match(/\d+/)?.[0];

    if (!mmr){
      this.throwOut({customText: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–∫–∞–∑–∞–Ω —Ä–µ–π—Ç–∏–Ω–≥", interaction});
      return;
    }

    const role = interaction.guild.roles.cache.get(roleId);
    if (!role){
      this.throwOut({code: "NOT_ROLE_IN_GUILD", interaction});
      return;
    }



    const guildData = GuildManager.getGuild( interaction.guild );

    if (guildData.rankRoles === null){
      guildData.rankRoles = [];
    }

    const { rankRoles } = guildData;

    rankRoles.push(`${ roleId }:${ mmr }`);

    GuildManager.update(guildData);

    const comment = `> ${ role } —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞. –ü–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞: ${ mmr }`;
    this.replaceContent({interaction, comment});
  }

  removeAll([...rest], interaction){

    const hasPermissions = interaction.member.permissions.has("MANAGE_GUILD");
    if (!hasPermissions){
      interaction.reply({ content: `–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∞–≤–æ –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–º`, ephemeral: true });
      return;
    }

    const guildData = GuildManager.getGuild( interaction.guild );
    guildData.rankRoles = [];

    GuildManager.update(guildData);

    const comment = `> –í—Å–µ —Ä–∞–Ω–≥–∏ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã`;
    this.replaceContent({interaction, comment});
  }


  throwOut({code, customText, interaction}){
    const CODES = {
      EMPTY_FIELD: "–û–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª–µ–π –ø—É—Å—Ç—ã!",
      NULL_ROLE_IN_TEXT: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–æ–ª—å –≤ –ø–æ–ª—É—á–µ–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ",
      NOT_ROLE_IN_GUILD: "–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–æ–ª–∏ —Å —Ç–∞–∫–∏–º ID"
    }

    const content = customText ?? CODES[ code ];
    interaction.reply({ ephemeral: true, content });
  }

}


export { Command };
